// Generated by IcedCoffeeScript 108.0.11

/*
* File: reporting-service
* User: Dow
* Date: 9/2/2015
* Desc:
 */
if (typeof define !== 'function') { var define = require('amdefine')(module) };
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['clc.foundation.angular/services/service'], function(base) {
  var QueryService, exports;
  QueryService = (function(_super) {
    __extends(QueryService, _super);

    function QueryService($rootScope, $http) {
      this.$rootScope = $rootScope;
      this.$http = $http;
      QueryService.__super__.constructor.apply(this, arguments);
    }

    QueryService.prototype.onSuccess = function(result, status, callback) {
      var err, _ref, _ref1;
      this.$rootScope.loading = false;
      if (!result) {
        return typeof callback === "function" ? callback('null result') : void 0;
      }
      if (result._err) {
        err = (_ref = result._err.message) != null ? _ref : result._err;
        return typeof callback === "function" ? callback(err) : void 0;
      }
      return typeof callback === "function" ? callback(null, (_ref1 = result.data) != null ? _ref1 : result, result.paging) : void 0;
    };

    QueryService.prototype.onError = function(result, status, callback) {
      var err, _ref;
      this.$rootScope.loading = false;
      if (result != null ? result._err : void 0) {
        err = (_ref = result._err.message) != null ? _ref : result._err;
      } else {
        err = "error: " + status;
      }
      return typeof callback === "function" ? callback(err) : void 0;
    };

    QueryService.prototype.beforeAction = function() {
      return this.$rootScope.loading = true;
    };

    QueryService.prototype.query = function(url, data, callback) {
      this.beforeAction();
      return this.$http.get(url, {
        params: data
      }).success((function(_this) {
        return function(result, status) {
          return _this.onSuccess(result, status, callback);
        };
      })(this)).error((function(_this) {
        return function(result, status) {
          return _this.onError(result, status, callback);
        };
      })(this));
    };

    return QueryService;

  })(base.Service);
  return exports = {
    QueryService: QueryService
  };
});
